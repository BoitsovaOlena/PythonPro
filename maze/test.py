from unittest import TestCase
from maze import Maze


class MazeTestCase(TestCase):
    def test_find_exit_teacher_positive(self):
        M = [
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '#', '#', '#'],
            ['#', '.', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '.', '#', '#', '#', '#', '#', '#', '#'],
            ['#', '#', '.', '#', '#', '.', '#', '#', '#', '#'],
            ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#']
        ]
        enter = [1, 0]
        expected_value = [9, 7]
        game = Maze(M, enter)
        game.find_exit()
        value = game.exit
        self.assertEqual(expected_value, value)

    def test_find_exit_teacher_negative(self):
        M = [
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '#', '#', '#'],
            ['#', '.', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '.', '#', '#', '#', '#', '#', '#', '#'],
            ['#', '#', '.', '#', '#', '.', '#', '#', '#', '#'],
            ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#']
        ]
        enter = [1, 0]
        expected_value = [1, 7]
        game = Maze(M, enter)
        game.find_exit()
        value = game.exit
        self.assertNotEqual(expected_value, value)

    def test_find_exit_my1_positive(self):
        M = [
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '#', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '.', '#', '#', '#', '#', '.', '#', '#'],
            ['.', '.', '#', '#', '#', '.', '#', '.', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        ]
        enter = [1, 0]
        expected_value = [7, 0]
        game = Maze(M, enter)
        game.find_exit()
        value = game.exit
        self.assertEqual(expected_value, value)

    def test_find_exit_my1_negative(self):
        M = [
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '#', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '.', '#', '#', '#', '#', '.', '#', '#'],
            ['.', '.', '#', '#', '#', '.', '#', '.', '#', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        ]
        enter = [1, 0]
        expected_value = [1, 7]
        game = Maze(M, enter)
        game.find_exit()
        value = game.exit
        self.assertNotEqual(expected_value, value)

    def test_find_exit_my2_positive(self):
        M = [
            ['#', '#', '.', '#', '#', '#', '#', '#', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
            ['#', '.', '#', '#', '#', '#', '.', '#', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '.', '#', '#', '#', '#', '#', '#', '.'],
            ['#', '#', '.', '#', '#', '.', '#', '#', '#', '#'],
            ['.', '#', '.', '.', '.', '.', '.', '.', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        ]
        enter = [0, 2]
        expected_value = [0, 8]
        game = Maze(M, enter)
        game.find_exit()
        value = game.exit
        self.assertEqual(expected_value, value)

    def test_find_exit_my2_negative(self):
        M = [
            ['#', '#', '.', '#', '#', '#', '#', '#', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '#', '#', '#', '#', '.', '#', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
            ['#', '.', '#', '#', '#', '#', '.', '#', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            ['#', '#', '.', '#', '#', '#', '#', '#', '#', '.'],
            ['#', '#', '.', '#', '#', '.', '#', '#', '#', '#'],
            ['.', '#', '.', '.', '.', '.', '.', '.', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        ]
        enter = [0, 2]
        expected_value = [1, 7]
        game = Maze(M, enter)
        game.find_exit()
        value = game.exit
        self.assertNotEqual(expected_value, value)
